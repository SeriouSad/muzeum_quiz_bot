import time

from django.db.models import Sum
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

from museum_bot.bot.config import bot
from museum_bot.models import *
from museum_bot.bot.keyboards import *
from museum_bot.bot.states import *


def process_finish(user):
    return UserMuseumProgression.objects.filter(user=user, finished=True).count() >= 5

def process_progress(user):
    test_progression = UserMuseumProgression.objects.get(user=user, finished=False)
    if test_progression.questions_count == 15:
        test_progression.finished = True
        test_progression.save()
        return True
    return False

def send_answer(question, message, correct):
    if question.order == 15:
        kb = res_kb
    else:
        kb = next_kb
    if question.answer_description.photo:
        if correct:
            bot.send_photo(message.chat.id, question.answer_description.photo, caption=question.answer_description.text_correct, reply_markup=kb)
        else:
            bot.send_photo(message.chat.id, question.answer_description.photo,
                           caption=question.answer_description.text, reply_markup=kb)
    else:
        if correct:
            bot.send_message(message.chat.id, question.answer_description.text_correct, reply_markup=kb)
        else:
            bot.send_message(message.chat.id, question.answer_description.text, reply_markup=kb)


def send_question(user, message):
    if process_progress(user):
        if process_finish(user):
            bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç,  –∏ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∑–≤—ë–∑–¥, –≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É /stars")
            bot.delete_state(user.tg_id, message.chat.id)
            return
        bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç, —É –≤–∞—Å —Å–µ–π—á–∞—Å {user.points}‚≠êÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º—É–∑–µ–π", reply_markup=museum_choice)
        bot.set_state(user.tg_id, AnswerStates.waiting_museum, message.chat.id)
        return
    test_progression = UserMuseumProgression.objects.get(user=user, finished=False)
    question = Question.objects.filter(museum=test_progression.museum).order_by("order")[test_progression.questions_count]
    answers = Answer.objects.filter(question=question)
    kb = InlineKeyboardMarkup()
    for i in answers:
        kb.add(InlineKeyboardButton(str(i.text), callback_data=i.id))

    if question.photo:
        bot.send_photo(message.chat.id, question.photo, caption=question.text, reply_markup=kb)
    else:
        bot.send_message(message.chat.id, question.text, reply_markup=kb)


@bot.message_handler(commands=['start'])
def start(message: types.Message):
    try:
        TgUser.objects.get(tg_id=message.from_user.id)
        # bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∫–≤–∏–∑—É")
    except TgUser.DoesNotExist:
        TgUser.objects.create(
            tg_id=message.from_user.id,
            username=message.from_user.username,
        )
    text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–µ–∫—Ç *¬´–ì–æ—Ä–æ–¥ –ì–µ—Ä–æ–µ–≤ –ú–æ—Å–∫–≤–∞¬ª*. ‚≠ê\n\n–ü—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ *–ö–æ–º–∏—Ç–µ—Ç–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã –∏ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –∫—É–ª—å—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã*.\n\n–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–µ—Ä–∏—é –∫–≤–µ—Å—Ç–æ–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º—É–∑–µ—è–º —Å—Ç–æ–ª–∏—Ü—ã. –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª. üëá"
    bot.send_message(message.chat.id, text, reply_markup=reg_kb, parse_mode="Markdown")
    bot.set_state(message.from_user.id, RegistrationStates.start, message.chat.id)


@bot.callback_query_handler(func=lambda call: True, state=RegistrationStates.start)
def func(call: types.CallbackQuery):
    # bot.send_message(call.message.chat.id, bot.get_state(call.from_user.id, call.message.chat.id))
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ–≥–æ –ø–∞—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ç—ã –≤ –∏–≥—Ä–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ *–Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è*‚ùóÔ∏è\n–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç–µ –§–ò–ûüëá", parse_mode="Markdown")
    bot.set_state(call.from_user.id, RegistrationStates.fio, call.message.chat.id)


@bot.message_handler(state=RegistrationStates.fio)
def func(message: types.Message):
    user = TgUser.objects.get(tg_id=message.from_user.id)
    user.fio = message.text[:254]
    user.save()
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reg_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    keyboard.add(reg_button)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*", reply_markup=keyboard, parse_mode="Markdown")
    bot.set_state(message.from_user.id, RegistrationStates.phone, message.chat.id)


@bot.message_handler(state=RegistrationStates.phone, content_types=['contact'])
def func(message: types.Message):
    user = TgUser.objects.get(tg_id=message.from_user.id)
    user.phone_number = message.contact.phone_number
    user.save()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π *email*", parse_mode="Markdown")
    bot.set_state(message.from_user.id, RegistrationStates.email, message.chat.id)


@bot.message_handler(state=RegistrationStates.phone)
def func(message: types.Message):
    user = TgUser.objects.get(tg_id=message.from_user.id)
    user.phone_number = message.text[:254]
    user.save()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π *email*", parse_mode="Markdown")
    bot.set_state(message.from_user.id, RegistrationStates.email, message.chat.id)


@bot.message_handler(state=RegistrationStates.email)
def func(message: types.Message):
    user = TgUser.objects.get(tg_id=message.from_user.id)
    user.email = message.text[:254]
    user.save()
    bot.send_message(message.chat.id,
                     "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å *—Å–æ–≥–ª–∞—Å–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*", reply_markup=conf_kb, parse_mode="Markdown")
    bot.set_state(message.from_user.id, RegistrationStates.confirm, message.chat.id)


@bot.callback_query_handler(func=lambda call: True, state=RegistrationStates.confirm)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id,
                     "*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n–ê –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å *–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏*.", reply_markup=rule_kb, parse_mode="Markdown")
    bot.set_state(call.from_user.id, RegistrationStates.rules, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: True, state=RegistrationStates.rules)
def func(call: types.CallbackQuery):
    rules = Rules.objects.all().first()
    bot.send_message(call.message.chat.id, rules.text, parse_mode='HTML')
    bot.delete_state(call.from_user.id, call.message.chat.id)


@bot.message_handler(commands=['start_quiz'])
def func(message: types.Message):
    text = "–ù—É –≤—Å–µ, *–º—ã –Ω–∞—á–∏–Ω–∞–µ–º*!\n\n‚û°Ô∏è *–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –º—É–∑–µ–π*, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –∏–ª–∏ –≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è  –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!"
    bot.send_message(message.chat.id, text, reply_markup=museum_choice, parse_mode="Markdown")
    bot.set_state(message.from_user.id, AnswerStates.waiting_museum, message.chat.id)


@bot.callback_query_handler(func=lambda call: True, state=AnswerStates.waiting_museum)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    user = TgUser.objects.get(tg_id=call.from_user.id)
    try:
        progress = UserMuseumProgression.objects.get(user=user, museum_id=int(call.data))
        if progress.finished:
            bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑ —ç—Ç–æ–≥–æ –º—É–∑–µ—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π", reply_markup=museum_choice)
            return
    except UserMuseumProgression.DoesNotExist:
        UserMuseumProgression.objects.create(user=user, museum_id=int(call.data))
    except UserMuseumProgression.MultipleObjectsReturned:
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–≤–∏–∑ –¥—Ä—É–≥–æ–≥–æ –º—É–∑–µ—è. –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è")
        send_question(user, call.message)
        return
    bot.set_state(call.from_user.id, AnswerStates.waiting_for_answer, call.message.chat.id)
    send_question(user, call.message)


@bot.callback_query_handler(func=lambda call: True, state=AnswerStates.waiting_for_answer)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    user = TgUser.objects.get(tg_id=call.from_user.id)
    progress = UserMuseumProgression.objects.get(user=user, finished=False)
    question = Question.objects.filter(museum=progress.museum).order_by("order")[
        progress.questions_count]
    answer = Answer.objects.get(id=int(call.data))
    user_answer = UserAnswer.objects.create(user=user, question=question)
    if answer.correct:
        user.points += 5
        user_answer.correct = True
        user_answer.save()
        send_answer(question, call.message, True)
        progress.questions_count += 1
        progress.hint_used = False
        progress.save()
    elif answer.correct and progress.hint_used:
        user.points += 2
        user_answer.correct = True
        user_answer.save()
        send_answer(question, call.message, True)
        progress.questions_count += 1
        progress.hint_used = False
        progress.save()
    elif question.hint and not progress.hint_used:
        bot.send_message(call.message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –Ω–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞\n\n{question.hint}")
        # TODO time.sleep(1)
        progress.hint_used = True
        progress.save()
        send_question(user, call.message)
        return
    else:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è")
        send_answer(question, call.message, False)
        progress.questions_count += 1
        progress.hint_used = False
        progress.save()
    user.save()
    bot.set_state(call.from_user.id, AnswerStates.waiting_for_next_question, call.message.chat.id)



@bot.callback_query_handler(func=lambda call: True, state=AnswerStates.waiting_for_next_question)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    user = TgUser.objects.get(tg_id=call.from_user.id)
    bot.set_state(call.from_user.id, AnswerStates.waiting_for_answer, call.message.chat.id)
    send_question(user, call.message)


@bot.message_handler(commands=['rules'])
def func(message: types.Message):
    rules = Rules.objects.all().first()
    bot.send_message(message.chat.id, rules.text, parse_mode='HTML')



@bot.message_handler(commands=['prize'])
def func(message: types.Message):
    a = """
    üéÅ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞</b> —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å <a href="https://t.me/gorodgeroevmsk">–∑–¥–µ—Å—å</a> <b>13 –æ–∫—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞</b>.
    
<b>–í–µ—Å—å –º–µ—Ä—á</b> –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–¥–µ—Å—å: https://t.me/gorodgeroevmsk —Å 13 –æ–∫—Ç—è–±—Ä—è

–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –∑–≤–µ–∑–¥—ã –Ω–∞ –ø—Ä–∏–∑—ã, —Ç–µ–±–µ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É¬ª
–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–∏–∑–æ–≤, <b>—É—á–∏—Ç—ã–≤–∞–π —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤</b>. 

–î–ª—è —Ç–æ–≥–æ <b>—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑</b> —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞ —á–∞—Ç —Å–ª–µ–¥—É—é—â–µ–µ:
 1Ô∏è‚É£ –°–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 2Ô∏è‚É£ –ù–æ–º–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ 
 3Ô∏è‚É£ –°—É–º–º—É –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –Ω–∞ –Ω–∏—Ö —Ç—Ä–∞—Ç–∏—à—å. 

‚ÄºÔ∏è–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–ª–∏—á–∏–µ –º–µ—Ä—á–∞, –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É: <b>–•–æ–ª–æ–¥–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫ 3–∫1—Å8</b>
    """
    bot.send_message(message.chat.id, a, parse_mode='HTML', reply_markup=mes_kb)


@bot.message_handler(commands=['account'])
def func(message: types.Message):
    user = TgUser.objects.get(tg_id=message.from_user.id)
    text = f"–§–ò–û: {user.fio}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone_number}\n–ü–æ—á—Ç–∞: {user.email}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {user.points}‚≠êÔ∏è"
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['stars'])
def func(message: types.Message):
    user = TgUser.objects.get(tg_id=message.from_user.id)
    text = f"–í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {user.points}‚≠êÔ∏è"
    bot.send_message(message.chat.id, text)
    if user.points < 300:
        bot.send_message(message.chat.id, "–¢—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∑–≤—ë–∑–¥, –≤—Å–µ –∏—Ö –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Å—Ç–∏–ª—å–Ω—ã–π –º–µ—Ä—á –≤–æ—Ç –∑–¥–µ—Å—å: —Å—Å—ã–ª–∫–∞")
    else:
        bot.send_message(message.chat.id, "–£—Ä–∞! –£ —Ç–µ–±—è —Ä–µ–∫–æ—Ä–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–±–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å—É–ø–µ—Ä-–∏–≥—Ä–µ, —Å–æ—Å—Ç–æ—è—â–µ–π –≤—Å–µ–≥–æ –∏–∑ —Ç—Ä–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. \n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Å—É–ø–µ—Ä-–∏–≥—Ä—ã –±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è ‚Ä¶.. —Å–µ–Ω—Ç—è–±—Ä—è. –û–±–ª–∞–¥–∞—Ç–µ–ª—å –ø—Ä–∏–∑–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å—Ä–µ–¥–∏ —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å—É–ø–µ—Ä-–∏–≥—Ä—ã.\n\n–ï—Å–ª–∏ —Ç—ã –≤ –∏–≥—Ä–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–í –∏–≥—Ä–µ¬ª", reply_markup=sp_game_kb)
        bot.set_state(message.chat.id, SPstates.start, message.from_user.id)


@bot.callback_query_handler(func=lambda call: True, state=SPstates.start)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    text = """–ê —Ç–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø, —Ç–µ–±–µ –Ω–∏–∂–µ –Ω–∞–¥–æ *–Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π —à–∏—Ñ—Ä*.\nüëâüèª –í –∫–∞–∂–¥–æ–º –º—É–∑–µ–µ, –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å—É–ø–µ—Ä-–≤–æ–ø—Ä–æ—Å –±—ã–ª–∞ —Ü–∏—Ñ—Ä–∞.\n*–ü–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ü–∏—Ñ—Ä—ã –≤ –≤–µ—Ä–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏*, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –º—É–∑–µ—è–º:\n\n–ì–ë–£–ö –≥. –ú–æ—Å–∫–≤—ã ¬´–ú—É–∑–µ–π-–ø–∞–Ω–æ—Ä–∞–º–∞ "–ë–æ—Ä–æ–¥–∏–Ω—Å–∫–∞—è –±–∏—Ç–≤–∞"¬ª\n–ì–ë–£–ö –≥. –ú–æ—Å–∫–≤—ã ¬´–ú–µ–º–æ—Ä–∏–∞–ª—å–Ω—ã–π –º—É–∑–µ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏¬ª\n–ì–ë–£–ö r. –ú–æ—Å–∫–≤—ã ¬´–ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ì–£–õ–ê–ì–∞¬ª\n–ì–ë–£–ö –≥. –ú–æ—Å–∫–≤—ã ¬´–ú—É–∑–µ–π –∞—Ä—Ö–µ–æ–ª–æ–≥–∏–∏ –ú–æ—Å–∫–≤—ã¬ª\n–ì–ë–£–ö –≥. –ú–æ—Å–∫–≤—ã ¬´–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –æ–±–æ—Ä–æ–Ω—ã –ú–æ—Å–∫–≤—ã¬ª"""
    bot.send_message(call.message.chat.id, text, parse_mode="Markdown")
    bot.set_state(call.from_user.id, SPstates.code, call.message.chat.id)


@bot.message_handler(state=SPstates.code)
def func(message: types.Message):
    if message.text == "15122117":
        bot.send_message(message.chat.id, "–ß—Ç–æ –∂,  –∫–æ–¥ –ø–æ–¥–æ—à–µ–ª. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—É–ø–µ—Ä-–∏–≥—Ä—É!", reply_markup=sp_kb)
        bot.set_state(message.from_user.id, SPstates.start2, message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ù–∞–º –∂–∞–ª—å, –Ω–æ –∫–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –≤–µ—Ä–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")


@bot.callback_query_handler(func=lambda call: True, state=SPstates.start2)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "1Ô∏è‚É£ –í –∫–∞–∫–æ–º –∏–∑ —ç—Ç–∏—Ö –º—É–∑–µ–µ–≤ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤?", reply_markup=question_kb1)
    bot.set_state(call.from_user.id, SPstates.question1, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: True, state=SPstates.question1)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    user = TgUser.objects.get(tg_id=call.from_user.id)
    result, created = SuperGameUser.objects.get_or_create(user=user)
    q_res = bool(int(call.data))
    if q_res:
        result.question1 = True
        result.save()
        bot.send_message(call.message.chat.id, "–í–µ—Ä–Ω–æ!\n\n–í –º—É–∑–µ–µ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏ –≤ –ú–æ—Å–∫–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –±–æ–ª–µ–µ 96 000 —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤.")
    else:
        bot.send_message(call.message.chat.id,
                         "–ù–∞–º –∂–∞–ª—å, —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.\n\n–í –º—É–∑–µ–µ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏ –≤ –ú–æ—Å–∫–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –±–æ–ª–µ–µ 96 000 —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤.")
    bot.send_message(call.message.chat.id, "2Ô∏è‚É£ –ö–∞–∫–æ–π –∏–∑ –º—É–∑–µ–µ–≤ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –º–æ–ª–æ–¥—ã–º?", reply_markup=question_kb2)
    bot.set_state(call.from_user.id, SPstates.question2, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: True, state=SPstates.question2)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    user = TgUser.objects.get(tg_id=call.from_user.id)
    result = SuperGameUser.objects.get(user=user)
    q_res = bool(int(call.data))
    if q_res:
        result.question2 = True
        result.save()
        bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–∞–≤—ã!\n\n–ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ì–£–õ–ê–ì–∞ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –≤ –∏—é–ª–µ 2001 –≥–æ–¥–∞.")
    else:
        bot.send_message(call.message.chat.id,
                         "–ù–∞–º –∂–∞–ª—å, —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.\n\n–°–∞–º—ã–π –º–æ–ª–æ–¥–æ–π ‚Äî –ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ì–£–õ–ê–ì–∞. –û–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –≤ –∏—é–ª–µ 2001 –≥–æ–¥–∞.")
    bot.send_message(call.message.chat.id, "3Ô∏è‚É£ –ö–∞–∫–æ–π –º—É–∑–µ–π –≤—ã—Å—Ç—Ä–æ–µ–Ω –≤–æ–∫—Ä—É–≥ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–≤–æ–∏—Ö —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤?", reply_markup=question_kb3)
    bot.set_state(call.from_user.id, SPstates.question3, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: True, state=SPstates.question3)
def func(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    user = TgUser.objects.get(tg_id=call.from_user.id)
    result, created = SuperGameUser.objects.get_or_create(user=user)
    q_res = bool(int(call.data))
    if q_res:
        result.question3 = True
        result.save()
        bot.send_message(call.message.chat.id, "–î–∞!\n\n–ú—É–∑–µ–π –∞—Ä—Ö–µ–æ–ª–æ–≥–∏–∏ –ú–æ—Å–∫–≤—ã ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º—É–∑–µ–π, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–æ–∫—Ä—É–≥ —É—Å—Ç–æ–µ–≤ –¥—Ä–µ–≤–Ω–µ–≥–æ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫–æ–≥–æ –º–æ—Å—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å–∫–æ–ø–æ–∫.")
    else:
        bot.send_message(call.message.chat.id,
                         "–ù–∞–º –∂–∞–ª—å, —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.\n\n–ú—É–∑–µ–π –∞—Ä—Ö–µ–æ–ª–æ–≥–∏–∏ –ú–æ—Å–∫–≤—ã ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º—É–∑–µ–π, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–æ–∫—Ä—É–≥ —É—Å—Ç–æ–µ–≤ –¥—Ä–µ–≤–Ω–µ–≥–æ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫–æ–≥–æ –º–æ—Å—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å–∫–æ–ø–æ–∫.")

    if result.question3 and result.question1 and result.question2:
        bot.send_message(call.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ: https://t.me/gorodgeroevmsk\n\n–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –æ–±—ä—è–≤–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.")
    else:
        bot.send_message(call.message.chat.id,
                         "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–º –∫–≤–µ—Å—Ç–µ!")
    bot.delete_state(call.from_user.id, call.message.chat.id)
